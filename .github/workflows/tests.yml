name: "CI: Comprehensive Tests and Coverage Analysis"

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [develop, master, feature_gha_rosbag2_service]

env:
  WORKSPACE_PATH: ${{ github.workspace }}
  TEST_RESULTS_PATH: test-results

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - job_name: carma_cloud_bridge_coverage
            docker_image: python:3.11
            test_path: telematic_system/telematic_units/carma_cloud_bridge/cloud_nats_bridge/test/
            requirements_file: telematic_system/telematic_units/carma_cloud_bridge/requirements.txt
            coverage_path: cloud_nats_bridge/test/coverage.xml
            additional_steps: |
              apt-get update
              apt-get -y install python3-coverage python3-pip python3-pytest
              python3 -m pip install -r ${{ env.WORKSPACE_PATH }}/${{ matrix.requirements_file }}

          - job_name: carma_vehicle_bridge_coverage
            docker_image: ros:foxy-ros1-bridge
            test_path: telematic_system/telematic_units/carma_vehicle_bridge/ros2_nats_bridge/test/
            requirements_file: null
            coverage_path: ros2_nats_bridge/test/coverage.xml
            additional_steps: |
              apt-get update
              apt-get -y install python3-coverage python3-pip python3-pytest python3-pytest-asyncio ros-foxy-rclpy unzip
              python3 -m pip install nats-py
              source /opt/ros/foxy/setup.bash
              rosdep update
              rosdep install --from-paths ${{ env.WORKSPACE_PATH }}/${{ matrix.test_path }} --ignore-src -r -y
              # Delete connection test
              rm -f test_prep257.py

          - job_name: telematic_cloud_messaging_coverage
            docker_image: openjdk:17-jdk-slim-buster
            test_path: telematic_system/telematic_cloud_messaging
            requirements_file: null
            coverage_path: telematic_cloud_messaging/target
            additional_steps: |
              cd ${{ env.WORKSPACE_PATH }}/${{ matrix.test_path }}
              ./mvnw org.jacoco:jacoco-maven-plugin:prepare-agent package
              ./mvnw org.jacoco:jacoco-maven-plugin:report package

          - job_name: web_app_client_coverage
            docker_image: node:16.16.0
            test_path: telematic_system/telematic_apps/web_app/client
            requirements_file: null
            coverage_path: web_app/client/coverage/*
            additional_steps: |
              npm install -g nodemon
              npm init -y
              npm install --force
              npm test

          - job_name: web_app_server_coverage
            docker_image: node:16.16.0
            test_path: telematic_system/telematic_apps/web_app/server
            requirements_file: null
            coverage_path: web_app/server/coverage/*
            additional_steps: |
              npm init -y
              npm install --force
              npm run test --coverage || true

          - job_name: rosbag2_processing_service_coverage
            docker_image: ros:foxy
            test_path: telematic_system/historical_data_processing/rosbag2_processing_service/
            requirements_file: null
            coverage_path: historical_data_processing/rosbag2_processing_service/coverage.xml
            additional_steps: |
              apt-get update
              apt-get -y install python3-coverage python3-pip python3-pytest python3-pytest-asyncio ros-foxy-rclpy unzip 
              python3 -m pip install nats-py influxdb influxdb_client mcap-ros2-support pathlib pytest-env
              apt install -y apt-utils python3-pybind11 ros-foxy-test-msgs python3-colcon-common-extensions
              cd ${{ env.WORKSPACE_PATH }}/src/
              git clone https://github.com/ros2/rosbag2.git --branch foxy-future
              cd .. 
              source /opt/ros/foxy/setup.bash
              colcon build --packages-up-to rosbag2_processing_service

    container:
      image: ${{ matrix.docker_image }}
      options: --user root

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Environment
        run: ${{ matrix.additional_steps }}

      - name: Run Tests and Generate Coverage Report
        if: matrix.job_name != 'telematic_cloud_messaging_coverage'
        run: |
          export PYTHONPATH=$PYTHONPATH:/usr/lib/python3/dist-packages
          cd ${{ env.WORKSPACE_PATH }}/${{ matrix.test_path }}
          python3 -m coverage run -m pytest
          python3 -m coverage xml --omit="/opt/*,/root/*,/tmp/*,/usr/*,/var/*,**/__init__.py"

      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.job_name }}-coverage
          path: ${{ env.WORKSPACE_PATH }}/${{ env.TEST_RESULTS_PATH }}/${{ matrix.coverage_path }}
          if-no-files-found: error

  sonar-analysis:
    needs: setup-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup SonarScanner
        uses: warchant/setup-sonar-scanner@v7

      - name: Download Code Coverage Results
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.TEST_RESULTS_PATH }}

      - name: Prepare SonarScanner properties
        run: |
          echo "sonar.host.url=https://sonarcloud.io" >> sonar-project.properties
          echo "sonar.organization=your-organization" >> sonar-project.properties
          echo "sonar.projectKey=your-project-key" >> sonar-project.properties
          echo "sonar.projectName=your-project-name" >> sonar-project.properties
          echo "sonar.exclusions=**/__init__.py,**/*test*.py,**/test/**" >> sonar-project.properties
          echo "sonar.coverage.exclusions=**/__init__.py,**/*test*.py,**/test/**" >> sonar-project.properties
          echo "sonar.python.coverage.reportPaths=${{ env.TEST_RESULTS_PATH }}/carma_cloud_bridge_coverage/coverage.xml,${{ env.TEST_RESULTS_PATH }}/carma_vehicle_bridge_coverage/coverage.xml,${{ env.TEST_RESULTS_PATH }}/rosbag2_processing_service_coverage/coverage.xml" >> sonar-project.properties
          echo "sonar.javascript.lcov.reportPaths=${{ env.TEST_RESULTS_PATH }}/web_app_client_coverage/lcov.info,${{ env.TEST_RESULTS_PATH }}/web_app_server_coverage/lcov.info" >> sonar-project.properties
          echo "sonar.java.binaries=${{ env.TEST_RESULTS_PATH }}/telematic_cloud_messaging_coverage/target/classes" >> sonar-project.properties
          echo "sonar.coverage.jacoco.xmlReportPaths=${{ env.TEST_RESULTS_PATH }}/telematic_cloud_messaging_coverage/target/site/jacoco/jacoco.xml" >> sonar-project.properties

      - name: Run SonarScanner
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}